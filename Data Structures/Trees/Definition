What is a Tree?
- A data structure that consists of nodes in a parent/child relationship

TERMINOLOGY:
Root: The top node in a Tree
Child:A node directly connected to another node when moving awat from the Root
Parent: The converse notion of a child
Siblings: A group of nodes with the same parent
Leaf: a node with no children
Edge: The connection between one node and another

USES
- HTML DOM
- Network Routing
- Abstract Syntax Trees
- Artificial Intelligence
- Folders in Operating Systems
- Json, etc


KINDS OF TREES
- Trees: Each node can have any number of child nodes
- Binary Trees: Each node can have at most two children
- Binary Search Trees: Are sorted binary trees. They are kept in an order.
  For every node including the root, every child node larger than itself is
  put on the right side of the node, and every smaller child node is put on
  the left.

REMOVING A NODE FROM A BINARY TREE
- CASE 1: Node is a leaf node (has no children)
  * Find the node
  * Unlink it from it's parent

- CASE 2: Node has one child.
  * Find the node
  * Unlink it from its parent
  * Promote the child

- CASE 3: Node has two children.
  * Find the node
  * Go to its right child
  * Go to its leftmost child
  * replace deleted node with successor
  * promote the successor's child

- Algorithm
  * three cases:
  * handle leaf node and node with left child only: leaf node and leftchild only
  * handle leaf node with right child that has no left: right child with no left
  * handle leaf node with right child that has a left: right child with left
  


BIG O (BST)
Insertion - O(log n)
Searching - O(log n)
O(log n), best, average case because if you double the number of nodes, the node of steps required
to insert or find only increases by 1
Worst case: One sided BSTs (O(n))