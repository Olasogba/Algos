Quick Sort
- Like merge sort, exploits the fact that arrays of 0 or 1 are always sorted
- Works by selecting one element (called the "pivot") and finding the index
  where the pivot should end up in the sorted array
- Once the pivot is position appropriately quick sort can be applied on
  either side of the pivot



HOW DOES IT WORK?
- Pick some element
- Move all the elements lesser than that element to the left
- Move all the elements greater than the element to the right
- Then recursively repeat the process on the left side and on the right side
 

IMPORTANT - PIVOT HELPER
- In order to implement quick sort, it's useful to first implement a 
  function responsible for arranging elements in an array on either side of
  a pivot.
- Given an array, this helper function should designate an element as the 
  pivot
- It should then rearrange elements in the array so that all values lesser
  than the pivot are moved to the left of the pivot, and all values greater
  than the pivot are moved to the right of the pivot
- THe order of elements on either side of the pivot doesn't matter!
- The helper should do this in place, that is, it should not create a new
  array
- When complete the helper should return the index of the pivot

IMPORTANT - PICKING A PIVOT
- The runtime of quick sort depends in part on how one selects the pivot
- Ideally, the pivot should be chosen so that it's roughly the median
  value in the data set you're sorting
  - For simplicity, we'll always choose the pivot to be the first element
   (we'll talk about consequences of this later)
